"use strict"; Object.defineProperty(exports, "__esModule", { value: !0 }), exports.checkPassword = exports.passwordHashing = exports.refreshTokenEncoded = exports.decodedToken = exports.generateToken = void 0; var HashAlgorithm, crypto_1 = require("crypto"), jsonwebtoken_1 = require("jsonwebtoken"); function generateToken(e) { var s = e.data, o = e.tokenSecret, a = e.expiresIn, n = e.algorithm; try { return { token: (0, jsonwebtoken_1.sign)(void 0 === s ? {} : s, o, { expiresIn: void 0 === a ? "24h" : a, algorithm: void 0 === n ? "HS256" : n }), success: !0 } } catch (r) { return { token: null, message: r, success: !1 } } } function decodedToken(e) { var s = e.tokenSecret, o = void 0 === s ? process.env.TOKEN_SECRET : s, a = e.token; try { return { data: (0, jsonwebtoken_1.verify)(a, o), success: !0 } } catch (n) { return { data: null, success: !1, message: n.message } } } exports.generateToken = generateToken, exports.decodedToken = decodedToken, function (e) { e.SHA1 = "sha1", e.SHA256 = "sha256", e.SHA384 = "sha384", e.SHA512 = "sha512", e.MD5 = "md5" }(HashAlgorithm || (HashAlgorithm = {})); var length = 16; function refreshTokenEncoded(e) { var s = e.hashedPass, o = e.data, a = e.expiresIn, n = e.tokenSecret, r = {}; if (r.data = void 0 === o ? {} : o, !s) return generateToken({ data: r, expiresIn: a, tokenSecret: n }).token; var t = passwordHashing({ password: s }), d = t.hash, c = t.salt; r.sessionToken = "".concat(c, "####").concat(d) } function passwordHashing(e) { var s = e.salt, o = void 0 === s ? (0, crypto_1.randomBytes)(Math.ceil(length / 2)).toString("hex").slice(0, length) : s, a = e.password, n = e.algorithm, r = void 0 === n ? HashAlgorithm.SHA256 : n, t = e.encoding; try { var d = (0, crypto_1.createHmac)(r, o); return d.update(void 0 === a ? "" : a), { salt: o, success: !0, hash: d.digest(void 0 === t ? "base64" : t) } } catch (c) { return { success: !1, salt: void 0, hash: void 0, message: c.message } } } function checkPassword(e) { var s, o = e.salt, a = e.hash; return (null === (s = passwordHashing({ salt: o, password: e.password })) || void 0 === s ? void 0 : s.hash) == a } exports.refreshTokenEncoded = refreshTokenEncoded, exports.passwordHashing = passwordHashing, exports.checkPassword = checkPassword;